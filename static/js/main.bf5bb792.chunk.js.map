{"version":3,"sources":["Todo.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","card","margin","Todo","props","classes","Card","className","CardContent","Typography","variant","component","title","CardActions","Button","size","color","onClick","removeTodo","theme","layout","width","marginLeft","spacing","marginRight","breakpoints","up","paper","marginTop","marginBottom","padding","submit","App","useState","todos","setTodos","input","setInput","CssBaseline","Paper","align","Grid","container","item","xs","TextField","id","label","value","onChange","e","target","type","fullWidth","disabled","preventDefault","map","todo","index","console","log","filter","todoitem","removingT","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wVASMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,OAAQ,cAuBGC,EAnBF,SAACC,GACZ,IAAMC,EAAUN,IAEhB,OACE,kBAACO,EAAA,EAAD,CAAMC,UAAWF,EAAQJ,MACvB,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,KACnCP,EAAMQ,QAGX,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQC,MAAM,UAAUC,QAASb,EAAMc,YAApD,sB,2CCbFnB,EAAYC,aAAW,SAACmB,GAAD,MAAY,CACvCC,OAAO,aACLC,MAAO,OACPC,WAAYH,EAAMI,QAAQ,GAC1BC,YAAaL,EAAMI,QAAQ,IAC1BJ,EAAMM,YAAYC,GAAG,IAAyB,EAAnBP,EAAMI,QAAQ,IAAU,CAClDF,MAAO,IACPC,WAAY,OACZE,YAAa,SAGjBG,MAAM,aACJC,UAAWT,EAAMI,QAAQ,GACzBM,aAAcV,EAAMI,QAAQ,GAC5BO,QAASX,EAAMI,QAAQ,IACtBJ,EAAMM,YAAYC,GAAG,IAAyB,EAAnBP,EAAMI,QAAQ,IAAU,CAClDK,UAAWT,EAAMI,QAAQ,GACzBM,aAAcV,EAAMI,QAAQ,GAC5BO,QAASX,EAAMI,QAAQ,KAG3BQ,OAAQ,CACN7B,OAAQiB,EAAMI,QAAQ,EAAG,EAAG,QAiFjBS,MA7Ef,WAIE,IAAM3B,EAAUN,IAJH,EAMakC,mBAAS,IANtB,mBAMNC,EANM,KAMCC,EAND,OAOaF,mBAAS,IAPtB,mBAONG,EAPM,KAOCC,EAPD,KAyBb,OACE,yBAAK9B,UAAU,OACb,kBAAC+B,EAAA,EAAD,MAEA,0BAAM/B,UAAWF,EAAQe,QACvB,kBAACmB,EAAA,EAAD,CAAOhC,UAAWF,EAAQsB,OACxB,kBAAClB,EAAA,EAAD,CAAYE,UAAU,KAAKD,QAAQ,KAAK8B,MAAM,UAA9C,aAGA,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACnB,QAAS,GACvB,kBAACkB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAD,CACEC,GAAG,YACHC,MAAM,YACNC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAOb,EAASa,EAAEC,OAAOH,QACnCI,KAAK,OACLC,WAAS,KAQb,kBAACZ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAAC9B,EAAA,EAAD,CACEJ,QAAQ,YACRM,MAAM,UACNsC,UAAWlB,EACXgB,KAAK,SACLnC,QA7CO,SAACiC,GACpBA,EAAEK,iBACFpB,EAAS,CAACC,GAAF,mBAAYF,KACpBG,EAAS,KA2CG9B,UAAWF,EAAQ0B,QANrB,cAaHG,EAAMsB,KAAI,SAACC,EAAMC,GAAP,OACT,kBAAC,EAAD,CACE9C,MAAO6C,EACPvC,WAAY,kBAlDN,SAACwC,GACjBC,QAAQC,IAAI,WACZD,QAAQC,IAAIF,GACZ,IAAID,EAAOvB,EAAMwB,GACjBC,QAAQC,IAAIH,GACZtB,EAASD,EAAM2B,QAAO,SAACC,GAAD,OAAcA,IAAaL,MA6CrBM,CAAUL,IAC5BM,IAAKN,WC/FCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.bf5bb792.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Todo.css\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    margin: \"10px 0px\",\r\n  },\r\n});\r\n\r\nconst Todo = (props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardContent>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          {props.title}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button size=\"small\" color=\"primary\" onClick={props.removeTodo}>\r\n          Click To Delete\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React, { useState } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport \"./App.css\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n// import ReactDOM from \"react-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\n// import Container from \"@material-ui/core/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  layout: {\r\n    width: \"auto\",\r\n    marginLeft: theme.spacing(2),\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n      width: 600,\r\n      marginLeft: \"auto\",\r\n      marginRight: \"auto\",\r\n    },\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(3),\r\n    marginBottom: theme.spacing(3),\r\n    padding: theme.spacing(2),\r\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n      marginTop: theme.spacing(6),\r\n      marginBottom: theme.spacing(6),\r\n      padding: theme.spacing(3),\r\n    },\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(2, 0, 0),\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  //we need a list of todo's\r\n  //useState\r\n\r\n  const classes = useStyles();\r\n\r\n  const [todos, setTodos] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  // console.log(input);\r\n  // console.log(todos);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setTodos([input, ...todos]);\r\n    setInput(\"\");\r\n  };\r\n\r\n  const removingT = (index) => {\r\n    console.log(\"running\");\r\n    console.log(index);\r\n    let todo = todos[index];\r\n    console.log(todo);\r\n    setTodos(todos.filter((todoitem) => todoitem !== todo));\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <CssBaseline />\r\n\r\n      <main className={classes.layout}>\r\n        <Paper className={classes.paper}>\r\n          <Typography component=\"h1\" variant=\"h4\" align=\"center\">\r\n            To-do App\r\n          </Typography>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={9}>\r\n              <TextField\r\n                id=\"todoInput\"\r\n                label=\"Your Todo\"\r\n                value={input}\r\n                onChange={(e) => setInput(e.target.value)}\r\n                type=\"text\"\r\n                fullWidth\r\n              />\r\n              {/* <input\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          type=\"text\"\r\n        /> */}\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={!input}\r\n                type=\"submit\"\r\n                onClick={handleSubmit}\r\n                className={classes.submit}\r\n              >\r\n                Add Todo\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {todos.map((todo, index) => (\r\n            <Todo\r\n              title={todo}\r\n              removeTodo={() => removingT(index)}\r\n              key={index}\r\n            />\r\n          ))}\r\n        </Paper>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}